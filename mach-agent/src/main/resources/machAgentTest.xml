<!--

    Copyright (c) 2008-2015, Massachusetts Institute of Technology (MIT)
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-->
<!-- 
	name: machAgentTest.xml
	desc: Standalone test app, spoofing incoming data feed and MACH messages
	auth: jpullen	
	date: 20120329
	vers: 0.0.1
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- log4j configuration -->
	<bean id="log4jInitialization" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    	<property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
		<property name="targetMethod" value="initLogging" />
		<property name="arguments">
			<list>
				<value>log4j.properties</value>
			</list>
		</property>
    </bean>
      	

	<!-- MachAgent will be configured here, if it's in use.  May be able to do it with routes entirely -->
    <bean id="machAgent" class="edu.mit.ll.nics.mach.agent.MachAgent" >        
        <!-- MACH endpoint, usually rabbitmq -->
        <property name="machUri" value="seda:MACH" />
        
        <!-- The name of this component as used in appMgr, etc -->
        <property name="componentName" value="machAgentStandalone" />
        
        <!-- The node/hostname/ip this component is running on -->
        <property name="node" value="localhost" />
        
        <!-- 
        	For backward compatibility.  Checking message body for this text, instead
        	of a real JSON HeartbeatMessage
        	Default: HEARTBEAT
         -->
        <property name="nonJsonHeartbeatContent" value="HEARTBEAT" />
        
        <!-- 
    	Interval at which the agent sends a heartbeat request to MACH.  Intended to be a longer form
    	ping message, saying "I'm still here, if you didn't know".  Also will know when MACH hasn't
    	responded, implying MACH failed, and machAgent could send alerts if so configured.
    	
        Default: 5
     	-->
        <property name="hbIntervalInMinutes" value="1" />
    </bean>
   

	<camelContext id="mainCamelContext" xmlns="http://camel.apache.org/schema/spring">
		
		<!-- This properties file is used for machAgent configuration -->
		<propertyPlaceholder id="props1" location="file:machAgent.properties"/>

		   
        <!-- 
        	This is usually the main route the component uses on its own.  Here
        	it's modified to accept faked incoming data messages, and faked incoming
        	MACH messages
         -->
        <route id="mainComponentRoute">
            <!-- <from uri="udp://localhost:5555?"/> -->
            <!-- <from uri="timer://mach?fixedRate=true&amp;period=2s"/> -->
            <from uri="seda:incoming" />
            
            <!-- While parallel processing is not getting in the way of
            	the data feed, the point of having a filter is so mach messages
            	don't continue on to the component expecting other data...
            <multicast stopOnException="true" parallelProcessing="true">
                <to uri="seda:component"/>
                <process ref="machAgent"/>
            </multicast>
            -->
            
            <!--  Filtering method -->			
			<filter>
				<simple>${in.body} contains 'HEARTBEAT' or ${in.body} contains '{mach'</simple>
				<process ref="machAgent" />
				<stop />
			</filter>
			<to uri="seda:component"/>
            
        </route>


		<!-- Spoofs MACH sending a hb request to this component -->
		<route id="MachHBRequestStandin">
			<!-- ping udpMulticast route every 5 minutes -->
		    <from uri="timer://mach?fixedRate=true&amp;period=10s"/>
		    <transform><!-- TODO: Make a real mach HeartbeatMessage -->
		    	<simple>HEARTBEAT</simple>
			</transform>
		    <to uri="seda:incoming"/>
		</route>


		<!-- Spoofs the actual data this component ingests -->
        <route id="dataSourceRoute">
         	<from uri="timer://mach?fixedRate=true&amp;period=5s"/>
         	<transform>
		    	<simple>some incoming data packet</simple>
			</transform>
			<to uri="seda:incoming" />
        </route>


		<!-- 
			This prints the data packet sent to the component, showing MACH messages
			don't make it here
		 -->
		<route id="componentOutput">
			<from uri="seda:component" />
			<transform><simple>someComponent: ${bodyAs(String)}</simple></transform>
			<to uri="stream:out"/>
		</route>
		
		
		<!-- 
			This prints out messages the machAgent would send back to a MACH instance
		 -->
		<route id="MACH">
			<from uri="seda:MACH"/>
			<transform><simple>Sent to MACH: ${bodyAs(String)}</simple></transform>
			<to uri="stream:out" />
		</route>
        
    </camelContext>
    
</beans>

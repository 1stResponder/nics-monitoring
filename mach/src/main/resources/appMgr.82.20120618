#!/bin/bash
# Version 9f - 18 June 2010 (TR)
#----- manage lddrs applications 
# useage -  appRunner semantics
#   appMgr appId action Modifier

#----- H&S check on avlsUdop input feed with email alerts
function avlsUdopAlert() {
local APPID="avlsUdopAlert"
local APPHOME="scripts"
export APPINVOKE="/bin/bash ./avlsUdopAlert.sh"
cd $APPHOME
POLLTIME=300
appRunner $APPID $*
}

#Builds ROC reports and sends them the emailConsumer for distribution
function rocConsumer() {
local APPID="rocConsumer"
local APPHOME="./rocConsumer"
#APPJAR="./calfire-common-rocConsumer-1.0RC0_Camel2.1.0-jar-with-dependencies.jar"
APPJAR="./rocConsumer-1.3_Camel2.9.0-jar-with-dependencies.jar"
APPPROPS="./rocConsumer.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}

#Maintains KML and WMS service for exporting collaboration data
function collabFeedManager() {
local APPID="collabFeedManager"
local APPHOME="./collabFeedManager"
#APPJAR="./CollabFeedManager-1.0_Camel2.8.1-jar-with-dependencies.jar"
APPJAR="./CollabFeedManager-1.2.2_Camel2.9.0-jar-with-dependencies.jar"
APPPROPS="./collabFeedManager.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}

#Relays e-mail messages from amqp bus to atc mail server for delivery
function emailConsumer() {
local APPID="emailConsumer"
local APPHOME="./emailConsumer"
APPJAR="./calfire-common-emailConsumer-1.0_Camel2.8.1-jar-with-dependencies.jar"
APPPROPS="./emailConsumer.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}

#------- avlsUdop ingests from rabbitmq topic
function avlsUdopRabbit() {
local APPID="avlsUdopRabbit"
local APPHOME="./avlsUdop"
APPJAR="./AvlsUDOP-1.0RC5_Camel2.8.0-jar-with-dependencies.jar"
APPPROPS="./avlsUdopRabbit.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}

#----- Note: avlsUdopTest is being used to test a new version of avls udop
#      ONLY ONE OR THE OTHER SHOULD BE RUNNING AT A TIME
#----- avlsUdop: AVLS User Defined Operating Picture common application
#      Function is to subscribe to avl kml placemarks and create a KML
#      document used by applications like OpenLayers or Google Earth.
function avlsUdopTest() {
local APPID="avlsUdopTest"
local APPHOME="./avlsUdop"
APPJAR="./AvlsUDOP-1.0RC5_Camel2.5.0-jar-with-dependencies.jar "
#APPJAR="./AvlsUDOP-1.0RC5_Camel2.8.0-jar-with-dependencies.jar "
APPPROPS="./avlsUdopTest.properties"
#APPPROPS="./avlsUdopRabbit.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}


#----- avlsUdop: AVLS User Defined Operating Picture common application
#      Function is to subscribe to avl kml placemarks and create a KML
#      document used by applications like OpenLayers or Google Earth.
#      Currently the kml document format is different for OL and GE.
#      A properties file is used to set parameters that control processing
#      differences and deployment of the document file. Environment variable
#      AVLS_UDOP_PROP_FILE should be set to set the location of the properties file.
# 
function avlsUdop() {
AVLS_UDOP_INSTANCE_NAME="avlsUdop"
local APPHOME="./avlsUdop"  # location of env/other settings, artifacts
local PROP_FILE="avlsUdop.properties"
local LIB_JAR_LOC="/home/dmit/repository"
local APP_JAR_LOC=${APP_JAR_LOC:-${LIB_JAR_LOC}}

cd $APPHOME           # folder containing environment, settings, and artifacts
. ./invokeEnvironment # get UDOP environment variables

POLLTIME=300

appRunner $AVLS_UDOP_INSTANCE_NAME $*  # run the app
}

#----- PPLI kml ingest and UDOP producer
function ppliUdop() {
   export APPNAME="ppliUdop"
   export APPHOME="./pli/PPLIKmlConsumer"
   export POLLTIME=300
   cd $APPHOME       # in this case, cd to app directory

# set up application invoke command   
   export APPINVOKE="java -jar ./PPLIKmlConsumer-1.0-SNAPSHOT.jar \
  -p ./PPLIKmlConsumer.properties"

   appRunner $APPNAME $*  # delegate lifecycle to appRunner
}



#----- Ingest ldm mesonet/RAWS file, and produce weather layer in
#      the form of a kml document. Common for OL and GE
#      Expect to have MESONET_PROPERTIES file define for either
#      openlayers (OL) or google earth (GE)
function mesonetUdop() {
   MESONET_APP_NAME="mesonetUdop"
   local APP_HOME="./weather/mesonet"   # location of application and data files
   local APP_PROPS="./mesonetUdop.properties"
   local LIB_JAR_LOC="/home/dmit/repository"
   POLLTIME="300"                      # watcher poll time (sec)

   cd $APP_HOME                        # set up environment for invocation
   . ./invokeEnvironment 

   appRunner $MESONET_APP_NAME $*      # invoke application with runner parameters
}

#----- kmlArchiver
function kmlArchiver(){
local APP_HOME="./kmlArchiver/KMLArchive/bin"
local APPNAME="kmlArchiver"
cd $APP_HOME
. ./invokeEnvironment

appRunner $APPNAME $*
}

function gstArchiver(){
local APP_HOME="./gstArchiver/GSTArchive/bin"
local APPNAME="gstArchiver"
cd $APP_HOME
. ./invokeEnvironment

appRunner $APPNAME $*
}


function cotArchiver(){
local APP_HOME="./cotArchiver/OV10CoTArchive"
local APPNAME="cotArchiver"
cd $APP_HOME
. ./invokeEnvironment

appRunner $APPNAME $*
}


function ov10ImageArchiver(){
local APP_HOME="./ov10ImageArchiver/OV10ImageArchive/bin"
local APPNAME="ov10ImageArchiver"
cd $APP_HOME
. ./invokeEnvironment

appRunner $APPNAME $*
}



function pliArchiver(){
local APP_HOME="./pli2Archiver/PLI2Archive/bin"
local APPNAME="pliArchiver"
cd $APP_HOME
. ./invokeEnvironment

appRunner $APPNAME $*
}



#----- gstXmpp2Amqp: moves gst avls from xmpp to amqp
function gstXmpp2amqp() {
local APPID="gstXmpp2amqp"
local APPHOME="./gstXmpp2amqp"
APPJAR="../common/calfire-common-transportBridge-2.1.0-jar-with-dependencies.jar"
APPPROPS="./gstXmpp2amqp.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 ${APPINVOKE} -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}

#----- getGstFromXmpp: moves gst avls from lddr3 xmpp to vm xmpp
function getGstFromXmpp() {
local APPID="getGstFromXmpp"
local APPHOME="./getGstFromXmpp"
APPJAR="../common/calfire-common-transportBridge-2.1.0-jar-with-dependencies.jar"
APPPROPS="./getGstFromXmpp.properties"

cd $APPHOME;
export APPINVOKE="java -server -Xms128m -Xmx1536m -XX:ThreadStackSize=320 -XX:ParallelGCThreads=10 \
-XX:+UseParallelGC -XX:GCTimeRatio=19 ${APPINVOKE} -jar ${APPJAR} -p ${APPPROPS}"

POLLTIME=300
appRunner $APPID $*
}


#------ APP: get GST from gst bus, transform to kml, and send to avlskml
function gst2kml() {
local APPHOME="./gst2kml"  # location of environment, settings, artifacts

# tune locations for libraries and other jar files (used by invokeEnvironment)
local LIB_JAR_LOC=${LIB_JAR_LOC:-"/home/dmit/repository"}
local APP_JAR_LOC=${APP_JAR_LOC:-"/home/dmit/repository"}

cd $APPHOME           # go to folder for environment and artifacts
. ./invokeEnvironment # set classpath and APPINVOKE environment variables

POLLTIME=300          # app watcher poll time
appRunner gst2kml $*  # run the app
}

#------ get cell phone PPLI from the instamapper web site and send to avls message bus
function instamapper2MsgBus() {

local APP_HOME="./instamapper"  # run from this folder
local KEY="instamapper2MsgBus"
local JAR="./instamapper-1.0-SNAPSHOT.jar"

#From windows invocation
#echo Executing: java -jar %jarpath% -p ImProducerApp.properties
#%javapath%\java -jar %jarpath% -p ImProducerApp.properties
export APPINVOKE="java -Xms512m -Xmx1024m -jar $JAR -p ./ImProducerApp.properties"
cd $APP_HOME
appRunner $KEY $*
}

#------ APP: listen to a topic to receive incoming mobile pli
function android-pli-udop(){
local APP_HOME="./android-pli-udop"
local ID="android-pli-udop"
local JAR="./android-pli-udop-1.0.0-SNAPSHOT_Camel2.5.0-jar-with-dependencies.jar"

export APPINVOKE="java -Xms256m -Xmx512m -jar $JAR"
cd $APP_HOME
appRunner $ID $*
}


#------ APP: listen to amqp.topic and maintain state of collab room drawings
function collabRoomState(){
local APP_HOME="./collabRoomState"
local ID="collabRoomState"
local JAR="./collabRoomState-1.2.7-jar-with-dependencies.jar"

export APPINVOKE="java -Xms512m -Xmx1024m -jar $JAR"
cd $APP_HOME
appRunner $ID $*
}

#----- APP: copy of collabRoomState that contains mach support
function collabRoomStateMach(){
local APP_HOME="./collabRoomStateMach"
local ID="collabRoomStateMach"
local JAR="./collabRoomState-1.5-mach2-SNAPSHOT-jar-with-dependencies.jar"

export APPINVOKE="java -Xms512m -Xmx1024m -jar $JAR"
cd $APP_HOME
appRunner $ID $*
}


#----- APP: entityConsumerApplication
function entityConsumer(){
local APP_HOME="./entityConsumer"
local ID="entityConsumer"
local JAR="./entityConsumer-1.2.1-jar-with-dependencies.jar"

export APPINVOKE="java -Xms512m -Xmx1024m -jar $JAR"
cd $APP_HOME
appRunner $ID $*
}


#----- APP: MACH - Monitor And Control/Health
function mach(){
local APP_HOME="./mach"
local ID="mach"
local JAR="./mach-0.0.3-nics2.5-SNAPSHOT-jar-with-dependencies.jar"

export APPINVOKE="java -Xms512m -Xmx1024m -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=5050 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -jar $JAR"
#export APPINVOKE="java -xms512m -Xmx 1024m -jar $JAR"
cd $APP_HOME
appRunner $ID $*
}

# test mach, with appMgr integration activated
function mach2(){
 local APP_HOME="./mach2"
 local ID="mach2"
 local JAR="mach-0.0.4-nics4.7beta_appMgr-SNAPSHOT-jar-with-dependencies.jar"

 export APPINVOKE="java -Xms512m -Xmx1024m -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=5050 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -jar $JAR"
 #export APPINVOKE="java -xms512m -Xmx 1024m -jar $JAR"
 cd $APP_HOME
 appRunner $ID $*
}





# Listens to amqp collaboration topics and archives them to a database
function collabArchiver(){
  local APP_HOME="./collabArchiver"
  local ID="collabArchiver"
  local JAR="./collabArchiver-1.3.3-jar-with-dependencies.jar"

  export APPINVOKE="java -Xms512m -Xmx1024m -jar $JAR"
  cd $APP_HOME
  appRunner $ID $*
}	

# Listens for placemarks being sent by peocsProcessor, and transforms into a kml doc
function placemarkUdop(){
 local APP_HOME="./placemarkUdop"
 local ID="placemarkUdop"
 
 export APPINVOKE="/home/dmit/lddrsDeploy/placemarkUdop/runSpring.sh"
 cd $APP_HOME
 appRunner $ID $*
}

# Publishes NPS kml tracks, using the placemarkUdop app
function npsUdop(){
 local APP_HOME="./placemarkUdop"
 local ID="npsUdop"
 export APPINVOKE="/home/dmit/lddrsDeploy/placemarkUdop/runNpsUdop.sh"
 cd $APP_HOME
 appRunner $ID $*
}

# Handles the dynamic map cache
function dynamicMapCacheManager(){
  local APP_HOME="./dynamicMapCacheManager"
  local ID="dynamicMapCacheManager"
  local JAR="./dynamicmapcachemanager-1.0-jar-with-dependencies.jar"
  local APPPROPS="dynamicmapcachemanager.properties"

  export APPINVOKE="java -Xms512m -Xmx1024m -jar $JAR -p ${APPPROPS}"
  cd $APP_HOME
  appRunner $ID $*
}



#------ APP: get AVLS GST information via UDP, send to avls message bus
function gstUdp2MsgBus() {

local APPHOME="./Udp2Xmpp"  # location of application
local CP

CP=$APPHOME/bin
CP=$CP:$APPHOME/bin/log4j.properties
CP=$CP:$APPHOME/bin/logging.properties
CP=$CP:$APPHOME/bin/dmit-camel-spring.xml
CP=$CP:$APPHOME/lib/aopalliance-1.0.jar
CP=$CP:$APPHOME/lib/camel-core-2.0-M3.jar
CP=$CP:$APPHOME/lib/camel-mina-2.0-M3.jar
CP=$CP:$APPHOME/lib/camel-spring-2.0-M3.jar
CP=$CP:$APPHOME/lib/camel-xmpp-2.0-M3.jar
CP=$CP:$APPHOME/lib/log4j-1.2.13.jar
CP=$CP:$APPHOME/lib/commons-logging-1.1.1.jar
CP=$CP:$APPHOME/lib/commons-logging-api-1.1.jar
CP=$CP:$APPHOME/lib/mina-core-1.1.7.jar
CP=$CP:$APPHOME/lib/slf4j-api-1.5.6.jar
CP=$CP:$APPHOME/lib/slf4j-simple-1.5.6.jar
CP=$CP:$APPHOME/lib/smack-3.0.4.jar
CP=$CP:$APPHOME/lib/smackx-3.0.4.jar
CP=$CP:$APPHOME/lib/spring-aop-2.5.6.jar
CP=$CP:$APPHOME/lib/spring-beans-2.5.6.jar
CP=$CP:$APPHOME/lib/spring-context-2.5.6.jar
CP=$CP:$APPHOME/lib/spring-core-2.5.6.jar
CP=$CP:$APPHOME/lib/spring-tx-2.5.6.jar
CP=$CP:$APPHOME/lib/UDPDirectXmpp-1.0-SNAPSHOT.jar


export APPINVOKE="java -Xms512m -Xmx1024m -cp $CP edu.mit.ll.dmit.calfire.udptoxmpp.UDPDirectToXmpp"
APPINVOKE="$APPINVOKE -Did=\"gstUdp2MsgBus\""; 

export POLLTIME=300        # status polling interval time
appRunner gstUdp2MsgBus $*
}

#---- no function available
function error() {
   echo "Application $1 not found"
}


#--- get status for all apps
function statusAll() {
   for app in $APPS
   do
      ./appMgr $app status
   done
}

#--- list all app ids
function listAll() {
    for app in $APPS; do echo "$app"; done
}

#--- help
function help() {
   PREAMBLE="appMgr applicationIdentifier"
   echo "General: "
   appRunner help | sed "s/appRunner/appMgr/"
   echo "Local:
appMgr statusAll
appMgr listAll
appMgr help"
}

#========= implementation for function appMgr appId action [actionModifier]
#  appId and function must match, else error

APPS="avlsUdop gst2kml gstUdp2MsgBus gstXmpp2amqp instamapper2MsgBus"
APPS="${APPS} mesonetUdop android-pli-udop"
APPS="${APPS} ppliUdop kmlArchiver gstArchiver cotArchiver ov10ImageArchiver pliArchiver"
APPS="${APPS} collabRoomState collabRoomStateMach collabArchiver placemarkUdop npsUdop getGstFromXmpp dynamicMapCacheManager"
APPS="${APPS} avlsUdopRabbit avlsUdopTest avlsUdopAlert emailConsumer rocConsumer mach mach2 entityConsumer collabFeedManager"


APPID=$1; shift 1;   # get the app

case $APPID in       # select and execute functions
error)               $APPID $* ;;
emailConsumer)       $APPID $* ;;
rocConsumer)         $APPID $* ;;
avlsUdopRabbit)      $APPID $* ;;
avlsUdopTest)        $APPID $* ;;
avlsUdopAlert)       $APPID $* ;;
avlsUdop)            $APPID $* ;;
gst2kml)             $APPID $* ;;
gstUdp2MsgBus)       $APPID $* ;;
gstXmpp2amqp)        $APPID $* ;;
instamapper2MsgBus)  $APPID $* ;;
mesonetUdop)         $APPID $* ;;
ppliUdop)            $APPID $* ;;
collabRoomState)     $APPID $* ;;
collabRoomStateMach) $APPID $* ;;
collabArchiver)      $APPID $* ;;
placemarkUdop)	     $APPID $* ;;
npsUdop) 	     $APPID $* ;;
kmlArchiver)         $APPID $* ;;
gstArchiver)         $APPID $* ;;
cotArchiver)         $APPID $* ;;
ov10ImageArchiver)   $APPID $* ;;
pliArchiver)	     $APPID $* ;;
getGstFromXmpp)      $APPID $* ;;
android-pli-udop)    $APPID $* ;;
mach)		     $APPID $* ;;
mach2)		     $APPID $* ;;
entityConsumer)      $APPID $* ;;
collabFeedManager)   $APPID $* ;;
dynamicMapCacheManager) $APPID $* ;;
help) help ;;
statusAll) statusAll ;;
listAll) listAll ;;
*) echo "Unknown application ID $APPID" ;;
esac

====
    Copyright (c) 2008-2015, Massachusetts Institute of Technology (MIT)
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    3. Neither the name of the copyright holder nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
====

Mach Message Formats
Version: 0.0.1

note: WORK IN PROGRESS

=================================================================================
Messages Types
=================================================================================

	1) register
	2) unregister
	3) heartbeat	
	4) control


=================================================================================
Common fields
=================================================================================

Field			Description
---------------------------------------------------------------------------------
 type...........message type: {register, unregister, heartbeat, control, status}
 name...........name/id of component used throughout system
 time...........originating timestamp (in UTC?)
 node...........hostname of the node on which the component resides 
 version........the version of the message schema

=================================================================================
Message Definitions
=================================================================================

Each message will have the following structure:

{"mach":{
	"type":"<message type>",
	"name":"",
	"node":"",
	"time":"",
	"body":{"<MESSAGE>"}
	"version":""
}}


With "<MESSAGE>" being defined below for each type


1. register

	type: register

	direction: Component -> Mach

	fields:	 
		topic           the topic the component usually subscribes to, if it is a camel feed consumer component 
		path: 			the location of the component's root directory on the node
		metadata: 		Any extra notes or human readable information
		category:		category of component (eg, camel feed consumer, archiver, other)
		appMgrName:		name of the component's entry in appMgr, in case it's different from
					    the component's name
		
		These two may be implied by category type, so may not be necessary:
		
		isJMXenabled: 	True/False, whether or not JMX is enabled on the component
		isCamelApp:		True/False, whether or not the component uses camel
		
	

	Example:		 
					
		 
		 {				
			"topic":"<topic>",
			"path":"<path>",
			"appMgrName":"<componentName>",
			"metadata":"",
			"category":""
		 }
		 
	Full Example:
	
	{"mach":{"type":"register","name":"collabRoomState","node":"lddrsdev.ll.mit.edu","time":"2011-08-15 19:27:32",
		"body":{"topic":"","path":"","appMgrName":"collabRoomState","category":"camel"},"version":"0.0.1"}
		
	
=================================================================================

2. unregister

	type: unregister
	
	direction:  Component -> Mach
		
	fields:
		topic:		topic mach listens on for messages from this component
		reason:		reason for unregistering
				
	example:
	
		"unregister":
		{			
			"topic":"LDDRS.incident.mach.collab.collabRoomState",
			"reason":"Taking component offline"
		}
				
=================================================================================

3. heartbeat

	type:heartbeat
	
	direction: Mach -> Component, Component -> Mach
	
	fields:
	
	Type I:
		
	{
		"type":"request"
	}
	
	Type II:
	
	
	{
		"type":"response",
		"status":"<>",
		...
	}
		
	
=================================================================================

4. control

=================================================================================

	type:control
	
	direction: Client -> Mach
	
	fields:
	
	comments: This is really only if we have a client that can send control commands to
		a mach instance, which would in turn perform some control action on a component
		registered with the system.  At this point, I don't think we want to have individual
		components processing these commands and trying to take actions, as that would put
		more custom code onto the component, when we want it to mostly be handled by Mach.
	
	example:
		
	{
		"action":"<start, stop, restart, kill, set>",
		"service":"<app, camel, rabbit, ...>"
	}
	
	
	
	

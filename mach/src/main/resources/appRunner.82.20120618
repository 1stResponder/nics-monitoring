#!/bin/bash
# Version 7 May 7, 2010  Ted Roe

#NOTES:
#1) make command:  applicationId action actionModifier
#2) add functions: processDetails, ....
#
#----- process lifecycle management

#
# Parameters:
#
# appId start [background]
# appId stop
# appId restart [background]
# appId status
# appId watch [background | restart] |  [background restart]]

#---- save the application Id, action to take, and optional action modifiers
APPID=${1:-""}        # the (unique) identifier for the application
shift 1
ACTION=${1:-"help"}   # the action to take
ACTION_MODIFIER=${2:-""}  # an optional action modifier
ACTION_MODIFIER2=${3:-""} # another optional action modifier
shift 3

#DEBUG echo "$ACTION $ACTION_MODIFIER $ACTION_MODIFIER2"

#--- standard derived names
#... a unique identifier for this app
export APPID=${APPID:-"testapp"}
APPPID=""                     # the application process ID
APPLOGF=$APPID.log            # name of application log file
APPPIDF=$APPID.pid            # app process id storage file
WATCHERLOGF=$APPID.watch.log # name of app watcher log file
WATCHERPIDF=$APPID.watch.pid # watcher process id storage file
WATCHERID=""


#--- default application invocation string
RunAppDefault="./Loop.sh"
APPINVOKE=${APPINVOKE:-$RunAppDefault}

#--- default watcher status poll time in seconds,  override env var externally
POLLTIME=${POLLTIME:-"300"}


#---- start the app either in foreground or background via nohup
function start() {
    # Can override global action modifier (one shot) by defining env var
    # p_ACTION_MODIFIER prior to calling start - it is unset after the func call
    local l_ACTION_MODIFIER=${p_ACTION_MODIFIER:-$ACTION_MODIFIER}

   if status >/dev/null ; 
   then echo "$APPID is already running (pid:${APPPID})"; return 1; fi

   if [ x$l_ACTION_MODIFIER = x"background" ]
   then
     echo "starting $APPID : $(date)" >>$APPLOGF
     nohup $APPINVOKE 2>&1 1>>$APPLOGF &
     APPPID=$!
     echo $APPPID >$APPPIDF
     status >>$APPLOGF
   else
     $APPINVOKE
   fi

   unset p_ACTION_MODIFIER  # unset the action modifer parameter
}

#---- stop the app using SIGTERM
function stop() {
   
   if status >/dev/null ; 
   then 
       echo "stopping $APPID: $(date)" >>$APPLOGF
       kill $APPPID 2>&1 >/dev/null; 
       status >>$APPLOGF
   else echo "$APPID was not running (pid:${APPPID})"; return 1;
   fi
}

#---- restart the app
function restart() {
   echo "restarting $APPID: $(date)" >> $APPLOGF
   RESTART_DELAY=${RESTART_DELAY:-"10"}
   status 2>/dev/null
   if [ $? != 0 ]  # not running
   then
      stop
      while [ ! status ] ;do sleep $RESTART_DELAY; done;
      start
   fi
}

#---- return status (running or not-running)
function status() {
#  if there is an app pid and it is active, app is running
   if [ ! -z $APPPID ] 2>/dev/null
   then
      if $(ps -p $APPPID >/dev/null)
      then
         echo "status $APPID: $APPPIDF (pid:$APPPID) is running : $(date)"
      	 return 0
      fi
   fi
#  no app pid or it isn't running
   echo "status $APPID: $APPPIDF (pid:$APPPID) is NOT running : $(date)"
   return 1

}


#---- watcher for the application
function watch() {
local APPRUNNER=$(which appRunner)

   if [ x$ACTION_MODIFIER = x"background" ] # start in background
   then
      if [ x$ACTION_MODIFIER2 = x"restart" ] # and auto restart app
      then
         echo "$(date) background with restart"
         nohup $APPRUNNER $APPID watch restart 2>&1 1>>${WATCHERLOGF} &
         echo $! >$WATCHERPIDF
      else  # background w/o auto restart app
         echo "$(date) background w/o restart"
         nohup $APPRUNNER $APPID watch 2>&1 1>>${WATCHERLOGF} &
         echo $! >$WATCHERPIDF
      fi
   else
#DEBUG      echo "$(date) foreground"
      while true; 
      do 
         checkAppId   # force app PID check every status check
	 status       # do status check, and save status
         APPSTATUS=$?

         if [ x$ACTION_MODIFIER = x"restart" ] # if we want to auto-restart
         then
            if [ $APPSTATUS != "0" ] # app is not running
            then 
               echo "restarting $APPID: $(date)"
               # one-shot override of action modifier for app background
               p_ACTION_MODIFIER="background"
               start  # start the APP
            fi
         fi

         sleep $POLLTIME; # delay before next check

      done;
   fi
   
}

#---- dump process information
function processInfo() {
   echo "------$APPID: $(date)"
   lsof -p $(cat $APPPIDF)
}

#---- dump application (and watcher) information
function appInfo() {
   #---- determine if the app is running
   checkAppId
   if [ -z $APPPID ]
   then appPid="not running"
   else appPid=$APPPID
   fi

       

   #--- determing if a watcher is running
   checkWatcherId
   if [ x$WATCHERPID = "x" ]
   then watcherPid="not running" 
   else watcherPid=$WATCHERPID
   fi

   echo "-----$APPID:      $(date)"
   echo "PID:              $appPid"
   echo "PID file:         $APPPIDF"
   echo "Log file:         $APPLOGF"
   echo "Watcher PID:      $watcherPid"
   echo "Watcher PID file: $WATCHERPIDF"
   echo "Watcher log file: $WATCHERLOGF"
}

#---- check appId
function checkAppId() {
   APPPID=""  # erase previous knowledge
   if [ -f $APPPIDF ]
   then 
      APPPID=$(cat $APPPIDF)  # consume pid file

      if $(ps -p $APPPID >/dev/null)
      then
         return 0  # happy day
      else
         APPPID="" # no joy
	 return 1
      fi
   fi
}

#---- check watcher Id
function checkWatcherId() {
   WATCHERPID=""  # erase previous knowledge
   if [ -f $WATCHERPIDF ]
   then 
      WATCHERPID=$(cat $WATCHERPIDF)  # consume pid file

      if $(ps -p $WATCHERPID >/dev/null)
      then
         return 0  # happy day
      else
         WATCHERPID="" # no joy
	 return 1
      fi
   fi
}

#---- handle a trapped signal
function sigTrap() {
   null
}
 

#---- show help if requested, or for handle unknown action
function help() {
   PREAMBLE="appRunner applicationIdentifier"
   echo "$PREAMBLE start [background]"
   echo "$PREAMBLE stop"
   echo "$PREAMBLE restart [background]"
   echo "$PREAMBLE status"
   echo "$PREAMBLE processInfo"
   echo "$PREAMBLE appInfo"
   echo "$PREAMBLE watch [background | restart] |  [background restart]"
}

#------ initialize
#APPPID=""
#if [ -f $APPPIDF ]; then APPPID=$(cat $APPPIDF);fi

checkAppId


#------ invoke the action() (start, stop, ...)
$ACTION


